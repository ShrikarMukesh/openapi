/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.springopenapiexample;

import com.springopenapiexample.model.Blog;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-06-21T17:24:45.552438+05:30[Asia/Kolkata]")
@Validated
@Api(value = "blog", description = "the blog API")
public interface BlogApi {

    default BlogApiDelegate getDelegate() {
        return new BlogApiDelegate() {};
    }

    /**
     * POST /blog : Add a new blog
     *
     * @param blog Optional description in *Markdown* (required)
     * @return Created (status code 201)
     *         or Blog not found (status code 404)
     */
    @ApiOperation(value = "Add a new blog", nickname = "blogPost", notes = "", response = Blog.class, tags={ "blog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Blog.class),
        @ApiResponse(code = 404, message = "Blog not found") })
    @PostMapping(
        value = "/blog",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Blog> blogPost(@ApiParam(value = "Optional description in *Markdown*" ,required=true )  @Valid @RequestBody Blog blog) {
        return getDelegate().blogPost(blog);
    }


    /**
     * DELETE /blog/{blogid} : Get the blog by title
     *
     * @param blogid  (required)
     * @return Blog not found (status code 404)
     */
    @ApiOperation(value = "Get the blog by title", nickname = "deleteBlog", notes = "", tags={ "blog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 404, message = "Blog not found") })
    @DeleteMapping(
        value = "/blog/{blogid}"
    )
    default ResponseEntity<Void> deleteBlog(@ApiParam(value = "",required=true) @PathVariable("blogid") Long blogid) {
        return getDelegate().deleteBlog(blogid);
    }


    /**
     * GET /blog/{blogtitle} : Get the blog by title
     *
     * @param blogtitle  (required)
     * @return successful operation (status code 200)
     *         or Blog not found (status code 404)
     */
    @ApiOperation(value = "Get the blog by title", nickname = "getBlogByTitle", notes = "", response = Blog.class, responseContainer = "List", tags={ "blog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Blog.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Blog not found") })
    @GetMapping(
        value = "/blog/{blogtitle}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Blog>> getBlogByTitle(@ApiParam(value = "",required=true) @PathVariable("blogtitle") String blogtitle) {
        return getDelegate().getBlogByTitle(blogtitle);
    }


    /**
     * PUT /blog : update an existing blog
     *
     * @param blog Optional description in *Markdown* (required)
     * @return Created (status code 201)
     *         or Blog not found (status code 404)
     */
    @ApiOperation(value = "update an existing blog", nickname = "updateBlog", notes = "", response = Blog.class, tags={ "blog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Blog.class),
        @ApiResponse(code = 404, message = "Blog not found") })
    @PutMapping(
        value = "/blog",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Blog> updateBlog(@ApiParam(value = "Optional description in *Markdown*" ,required=true )  @Valid @RequestBody Blog blog) {
        return getDelegate().updateBlog(blog);
    }

}
